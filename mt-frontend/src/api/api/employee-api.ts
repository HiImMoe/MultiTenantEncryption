/* tslint:disable */
/* eslint-disable */
/**
 * MT-Encryption
 * API for the RE:Base frontend
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateEmployeeDTO } from '../dto';
// @ts-ignore
import { EmployeeDTO } from '../dto';
// @ts-ignore
import { UpdateEmployeeDTO } from '../dto';
/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary creates a new employee
         * @param {CreateEmployeeDTO} createEmployeeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeControllerCreateEmployee: async (createEmployeeDTO: CreateEmployeeDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmployeeDTO' is not null or undefined
            assertParamExists('employeeControllerCreateEmployee', 'createEmployeeDTO', createEmployeeDTO)
            const localVarPath = `/employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEmployeeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get employee with details
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeControllerGetEmployeeDetails: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('employeeControllerGetEmployeeDetails', 'employeeId', employeeId)
            const localVarPath = `/employee/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary lists the employees
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [employeeNumber] 
         * @param {string} [gender] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [jobTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeControllerGetEmployees: async (page?: number, pageSize?: number, employeeNumber?: string, gender?: string, firstName?: string, lastName?: string, jobTitle?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (employeeNumber !== undefined) {
                localVarQueryParameter['employeeNumber'] = employeeNumber;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['jobTitle'] = jobTitle;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update employee
         * @param {string} employeeId 
         * @param {UpdateEmployeeDTO} updateEmployeeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeControllerUpdateEmployee: async (employeeId: string, updateEmployeeDTO: UpdateEmployeeDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('employeeControllerUpdateEmployee', 'employeeId', employeeId)
            // verify required parameter 'updateEmployeeDTO' is not null or undefined
            assertParamExists('employeeControllerUpdateEmployee', 'updateEmployeeDTO', updateEmployeeDTO)
            const localVarPath = `/employee/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmployeeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary creates a new employee
         * @param {CreateEmployeeDTO} createEmployeeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeControllerCreateEmployee(createEmployeeDTO: CreateEmployeeDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeControllerCreateEmployee(createEmployeeDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get employee with details
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeControllerGetEmployeeDetails(employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeControllerGetEmployeeDetails(employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary lists the employees
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [employeeNumber] 
         * @param {string} [gender] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [jobTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeControllerGetEmployees(page?: number, pageSize?: number, employeeNumber?: string, gender?: string, firstName?: string, lastName?: string, jobTitle?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeControllerGetEmployees(page, pageSize, employeeNumber, gender, firstName, lastName, jobTitle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update employee
         * @param {string} employeeId 
         * @param {UpdateEmployeeDTO} updateEmployeeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeControllerUpdateEmployee(employeeId: string, updateEmployeeDTO: UpdateEmployeeDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeControllerUpdateEmployee(employeeId, updateEmployeeDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * 
         * @summary creates a new employee
         * @param {CreateEmployeeDTO} createEmployeeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeControllerCreateEmployee(createEmployeeDTO: CreateEmployeeDTO, options?: any): AxiosPromise<string> {
            return localVarFp.employeeControllerCreateEmployee(createEmployeeDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get employee with details
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeControllerGetEmployeeDetails(employeeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.employeeControllerGetEmployeeDetails(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary lists the employees
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [employeeNumber] 
         * @param {string} [gender] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [jobTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeControllerGetEmployees(page?: number, pageSize?: number, employeeNumber?: string, gender?: string, firstName?: string, lastName?: string, jobTitle?: string, options?: any): AxiosPromise<Array<EmployeeDTO>> {
            return localVarFp.employeeControllerGetEmployees(page, pageSize, employeeNumber, gender, firstName, lastName, jobTitle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update employee
         * @param {string} employeeId 
         * @param {UpdateEmployeeDTO} updateEmployeeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeControllerUpdateEmployee(employeeId: string, updateEmployeeDTO: UpdateEmployeeDTO, options?: any): AxiosPromise<void> {
            return localVarFp.employeeControllerUpdateEmployee(employeeId, updateEmployeeDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for employeeControllerCreateEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiEmployeeControllerCreateEmployeeRequest
 */
export interface EmployeeApiEmployeeControllerCreateEmployeeRequest {
    /**
     * 
     * @type {CreateEmployeeDTO}
     * @memberof EmployeeApiEmployeeControllerCreateEmployee
     */
    readonly createEmployeeDTO: CreateEmployeeDTO
}

/**
 * Request parameters for employeeControllerGetEmployeeDetails operation in EmployeeApi.
 * @export
 * @interface EmployeeApiEmployeeControllerGetEmployeeDetailsRequest
 */
export interface EmployeeApiEmployeeControllerGetEmployeeDetailsRequest {
    /**
     * 
     * @type {string}
     * @memberof EmployeeApiEmployeeControllerGetEmployeeDetails
     */
    readonly employeeId: string
}

/**
 * Request parameters for employeeControllerGetEmployees operation in EmployeeApi.
 * @export
 * @interface EmployeeApiEmployeeControllerGetEmployeesRequest
 */
export interface EmployeeApiEmployeeControllerGetEmployeesRequest {
    /**
     * 
     * @type {number}
     * @memberof EmployeeApiEmployeeControllerGetEmployees
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof EmployeeApiEmployeeControllerGetEmployees
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof EmployeeApiEmployeeControllerGetEmployees
     */
    readonly employeeNumber?: string

    /**
     * 
     * @type {string}
     * @memberof EmployeeApiEmployeeControllerGetEmployees
     */
    readonly gender?: string

    /**
     * 
     * @type {string}
     * @memberof EmployeeApiEmployeeControllerGetEmployees
     */
    readonly firstName?: string

    /**
     * 
     * @type {string}
     * @memberof EmployeeApiEmployeeControllerGetEmployees
     */
    readonly lastName?: string

    /**
     * 
     * @type {string}
     * @memberof EmployeeApiEmployeeControllerGetEmployees
     */
    readonly jobTitle?: string
}

/**
 * Request parameters for employeeControllerUpdateEmployee operation in EmployeeApi.
 * @export
 * @interface EmployeeApiEmployeeControllerUpdateEmployeeRequest
 */
export interface EmployeeApiEmployeeControllerUpdateEmployeeRequest {
    /**
     * 
     * @type {string}
     * @memberof EmployeeApiEmployeeControllerUpdateEmployee
     */
    readonly employeeId: string

    /**
     * 
     * @type {UpdateEmployeeDTO}
     * @memberof EmployeeApiEmployeeControllerUpdateEmployee
     */
    readonly updateEmployeeDTO: UpdateEmployeeDTO
}

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
    /**
     * 
     * @summary creates a new employee
     * @param {EmployeeApiEmployeeControllerCreateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeControllerCreateEmployee(requestParameters: EmployeeApiEmployeeControllerCreateEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeControllerCreateEmployee(requestParameters.createEmployeeDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get employee with details
     * @param {EmployeeApiEmployeeControllerGetEmployeeDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeControllerGetEmployeeDetails(requestParameters: EmployeeApiEmployeeControllerGetEmployeeDetailsRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeControllerGetEmployeeDetails(requestParameters.employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary lists the employees
     * @param {EmployeeApiEmployeeControllerGetEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeControllerGetEmployees(requestParameters: EmployeeApiEmployeeControllerGetEmployeesRequest = {}, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeControllerGetEmployees(requestParameters.page, requestParameters.pageSize, requestParameters.employeeNumber, requestParameters.gender, requestParameters.firstName, requestParameters.lastName, requestParameters.jobTitle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update employee
     * @param {EmployeeApiEmployeeControllerUpdateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public employeeControllerUpdateEmployee(requestParameters: EmployeeApiEmployeeControllerUpdateEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).employeeControllerUpdateEmployee(requestParameters.employeeId, requestParameters.updateEmployeeDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
